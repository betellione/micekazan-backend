@model ScreenViewModel
@{
    ViewData["Title"] = "Terminal";
}

<style>
    body, html {
        height: 100%;
        margin: 0;
        background-color: @Model.BackgroundColor;
        color: @Model.TextColor;
    }

    .background-image {
        position: fixed; 
        top: 0; 
        left: 0; 
        min-width: 100%; 
        min-height: 100%;
        background-image: url('../@Model.BackgroundPath');
        background-size: cover;
        background-position: center;
    }

    #content {
        display: flex;
         flex-direction: column;
         justify-content: center;
         align-items: center;
        position: relative;
        z-index: 2;
        text-align: center; /* Center the content */
    }

    #logo {
        max-height: 100px;
        max-width: 100px;
    }
    img[src="/"] {
        display: none;
    }

    label {
        display: block; /* Make labels stack on top of each other */
        margin: 20px 0; /* Add some space around them */
    }
</style>
<video id="videoElement" autoplay playsinline hidden="hidden" style="position: absolute"></video>
<div id="content" class="background-image">
    @{
        var result = Model.TextSize;
        var size = result + "px";
    }
    <img id="logo" src="~/@Model.LogoPath">
    <div style="font-size: @size">@Model.MainText</div>
    <div style="font-size: @size">@Model.Description</div>
</div>


@section Scripts {

    <script src="https://cdn.jsdelivr.net/npm/jsqr/dist/jsQR.min.js"></script>
    <script>
        const screenType = '@ViewData["ScreenType"]';
    
        if (screenType !== '0') {
            setTimeout(function() {
                fetch('@Url.Action("Terminal", "Home")', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                }).then(response => response.text());
            }, 4000);
        }
        function startCamera() {
            const videoElement = document.getElementById('videoElement');
            let prevCode = '';
            navigator.mediaDevices.getUserMedia({ video: { facingMode: 'user' } }).then(function (mediaStream) {
                videoElement.srcObject = mediaStream;

                const canvasElement = document.createElement('canvas');
                const canvasContext = canvasElement.getContext('2d');

                videoElement.addEventListener('loadedmetadata', function() {
                    setInterval(async function () {
                        canvasElement.width = videoElement.videoWidth;
                        canvasElement.height = videoElement.videoHeight;
                        canvasContext.drawImage(videoElement, 0, 0, canvasElement.width, canvasElement.height);
    
                        const imageData = canvasContext.getImageData(0, 0, canvasElement.width, canvasElement.height);
                        const code = jsQR(imageData.data, imageData.width, imageData.height);
                        if (code === null) {
                            return;
                        }
                        if (code.data.toString().length === 12 && code.data !== prevCode) {
                            prevCode = code.data
                            fetch('@Url.Action("PrintTicket", "Ticket")?code=' + code.data, {
                              method: 'POST',
                              headers: {
                                'Content-Type': 'application/json'
                              },
                            })
                            .then(response =>  {
                                if (response.ok) {
                                    window.location.href = '@Url.Action("TerminalSecond", "Home")?screenType=Success';
                                } else {
                                    window.location.href = '@Url.Action("TerminalSecond", "Home")?screenType=Fail';
                                }
                            })
                        }
                    }, 1000 / 30);
                });
            })
                .catch(function (error) {
                    console.error('Ошибка при получении доступа к камере:', error);
                });
        }

        window.onload = function () {
            startCamera();
        };
    </script>
}